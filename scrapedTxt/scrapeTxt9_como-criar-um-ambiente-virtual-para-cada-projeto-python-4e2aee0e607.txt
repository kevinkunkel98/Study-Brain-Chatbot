FabianodelimaabreuFollow--ShareQuando estamos desenvolvendo diversos projetos em Python,  comum utilizarmos diferentes verses de uma mesma biblioteca entre este projetos. E ainda mais comum so problemas de compatibilidade quando instalamos as libs de um projeto em uma imagem docker no openshift, por exemplo, sem informarmos a verso exata da bibilioteca a ser instalada, e assim a verso atual da lib instalada local rodando normalmente fica diferente da verso instalada na imagem do openshift gerando erros de processos inesperados no momento da execuo aps deploy.O que veremos nesse artigo  como gerenciar melhor tudo isso e organizar melhor seu ambiente de desenvolvimento.O que  uma virtualenv?Como dito acima, um problema muito comum acontece quando precisamos utilizar diversas verses de uma mesma biblioteca em diferentes projetos Python. Isso pode acarretar em conflitos entre as verses e muita dor de cabea para o desenvolvedor. Para resolver este problema, o mais correto  a criao de um ambiente virtual para cada projeto.Como funciona uma virtualenv?O funcionamento de uma virtualenv  bem simples. Basicamente, uma cpia dos diretrios necessrios para que um programa Python seja executado  criada, incluindo:Isso faz com que as dependncias sejam sempre instaladas em uma virtualenv especfica, no mais no sistema operacional.Instalando a virtualenvPara a instalao do virtualenv vamos precisar do pip.Caso voc ainda no tenha o gerenciador de pacotes pip, instale-o clicando aqui e executando o script baixado com python get-pip.py.Agora com o pip, precisamos executar apenas um comando para instalar o virtualenv:pip install virtualenvCriando uma nova virtualenvO processo de criao de uma virtualenv  bastante simples e geralmente  executada na raiz do projeto:virtualenv nome_da_virtualenvAtivando uma virtualenvAps criar uma virtualenv, precisamos ativ-la para que possamos instalar os pacotes necessrios do projeto. Para isso, utilizamos o seguinte comando:source nome_da_virtualenv/bin/activate (Linux ou macOS)nome_da_virtualenv/Scripts/Activate (Windows)O comando acima ir ativar a virtualenv e teremos um retorno similar ao ilustrado abaixo:Note que o nome da virtualenv, agora,  exibido antes do caminho do diretrio em que estamos. Isso indica que a virtualenv foi ativada com sucesso.Desativando uma virtualenvPara desativar uma virtualenv utilizamos o comando deactivate, como podemos ver abaixo:Com a virtualenv ativada, podemos instalar os pacotes necessrios do projeto utilizando o prprio PIP:Com isso, instalamos o pacote Django, em sua verso mais atual, na virtualenv do projeto projeto_python.Agora, se precisarmos instalar uma outra verso do Django em outro projeto, bastaria criar uma nova virtualenv e realizar o mesmo processo:Com isso, teremos diferentes verses do Django instaladas no mesmo sistema operacional, porm isoladas em cada ambiente. Sendo assim, o projeto projeto_python utiliza a verso mais recente (2.1.3) e o projeto_python_2 utiliza a verso 2.11, tudo de forma isolada entre os projetos:Salvando as dependncias com requirements.txtPois bem mas ainda temos um problema, depois de instalado todos os pacotes necessrios para a sua aplicao, assim que fizer um push para o github gostaramos que quem fizer um clone do projeto no tenha que instalar todas as dependncias manualmente, ou pior, ter que saber qual  exatamente a verso utilizada do pacote a ser instalado. O gerenciador de pacotes pip nos traz uma soluo pra isso, onde criaremos um arquivo requirements.txt para deixar disponvel as dependncias necessrias para que o seu projeto rode.Para criarmos o arquivo requirements.txt j com todas as dependncias do ambiente  bem simples, precisamos apenas do comando pip freeze > requirements.txt.Feito isto, j temos o arquivo como os pacotes que so utilizados no projeto, informando tambm as verses que foram utilizadas.Agora se outro desenvolvedor for rodar o projeto, ele pode utilizar o comando pip install -r requirements.txt que o gerenciador de pacotes cuidar de baixar e instalar as verses corretas de todos os pacotes que foram utilizados no sistema.----AL Anany--103Unbecoming--917Avi ChawlainTowards Data Science--48The PyCoachinArtificial Corner--568Dmitry KruglovinBetter Programming--48Kim Witten, PhD--10HelpStatusWritersBlogCareersPrivacyTermsAboutText to speechTeams